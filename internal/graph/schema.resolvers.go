package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"copilot-poc/internal/graph/model"
	mongoModels "copilot-poc/internal/models"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// cast input.UserID to primitive.ObjectID
	userID, err := primitive.ObjectIDFromHex(input.UserID)
	if err != nil {
		return nil, err
	}

	// insert input into MongoDB
	todo := &mongoModels.Todo{
		Text:   input.Text,
		Done:   false,
		UserID: userID,
	}

	// insert input into MongoDB using TodoRepo
	todoID, err := r.TodoRepo.InsertOne(ctx, todo)
	if err != nil {
		return nil, err
	}

	// return Todo with todoID
	return &model.Todo{
		ID:     todoID,
		Text:   input.Text,
		Done:   false,
		UserID: input.UserID,
	}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	// insert input into MongoDB
	user := &mongoModels.User{
		Name: input.Name,
	}

	// insert input into MongoDB using UserRepo
	userID, err := r.UserRepo.InsertOne(ctx, user)
	if err != nil {
		return nil, err
	}

	// return the inserted user
	return &model.User{
		ID:   userID,
		Name: input.Name,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, userID string) ([]*model.Todo, error) {
	// fetch todos from MongoDB
	todos := []*mongoModels.Todo{}

	// cast userID to primitive.ObjectID
	userObjectID, err := primitive.ObjectIDFromHex(userID)
	if err != nil {
		return nil, err
	}
	// get todos from TodoRepo
	todos, err = r.TodoRepo.FindAll(ctx, bson.M{"userId": userObjectID})
	if err != nil {
		return nil, err
	}

	// convert todos to model.Todo
	modelTodos := []*model.Todo{}
	for _, todo := range todos {
		modelTodos = append(modelTodos, &model.Todo{
			ID:     todo.ID,
			Text:   todo.Text,
			UserID: todo.UserID.Hex(),
			Done:   todo.Done,
		})
	}
	// return the todos
	return modelTodos, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	return &model.User{ID: obj.UserID, Name: "user " + obj.UserID}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
