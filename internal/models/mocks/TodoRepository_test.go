// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "copilot-poc/internal/models"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

type TodoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TodoRepository) EXPECT() *TodoRepository_Expecter {
	return &TodoRepository_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields: ctx, query
func (_m *TodoRepository) FindAll(ctx context.Context, query primitive.M) ([]*models.Todo, error) {
	ret := _m.Called(ctx, query)

	var r0 []*models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M) ([]*models.Todo, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.M) []*models.Todo); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.M) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type TodoRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
//   - query primitive.M
func (_e *TodoRepository_Expecter) FindAll(ctx interface{}, query interface{}) *TodoRepository_FindAll_Call {
	return &TodoRepository_FindAll_Call{Call: _e.mock.On("FindAll", ctx, query)}
}

func (_c *TodoRepository_FindAll_Call) Run(run func(ctx context.Context, query primitive.M)) *TodoRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(primitive.M))
	})
	return _c
}

func (_c *TodoRepository_FindAll_Call) Return(_a0 []*models.Todo, _a1 error) *TodoRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepository_FindAll_Call) RunAndReturn(run func(context.Context, primitive.M) ([]*models.Todo, error)) *TodoRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function with given fields: ctx, input
func (_m *TodoRepository) InsertOne(ctx context.Context, input *models.Todo) (string, error) {
	ret := _m.Called(ctx, input)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Todo) (string, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Todo) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Todo) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepository_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type TodoRepository_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - ctx context.Context
//   - input *models.Todo
func (_e *TodoRepository_Expecter) InsertOne(ctx interface{}, input interface{}) *TodoRepository_InsertOne_Call {
	return &TodoRepository_InsertOne_Call{Call: _e.mock.On("InsertOne", ctx, input)}
}

func (_c *TodoRepository_InsertOne_Call) Run(run func(ctx context.Context, input *models.Todo)) *TodoRepository_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Todo))
	})
	return _c
}

func (_c *TodoRepository_InsertOne_Call) Return(insertedID string, err error) *TodoRepository_InsertOne_Call {
	_c.Call.Return(insertedID, err)
	return _c
}

func (_c *TodoRepository_InsertOne_Call) RunAndReturn(run func(context.Context, *models.Todo) (string, error)) *TodoRepository_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
