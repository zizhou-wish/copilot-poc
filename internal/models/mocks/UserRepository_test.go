// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	models "copilot-poc/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// InsertOne provides a mock function with given fields: input
func (_m *UserRepository) InsertOne(input *models.User) (string, error) {
	ret := _m.Called(input)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User) (string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(*models.User) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type UserRepository_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - input *models.User
func (_e *UserRepository_Expecter) InsertOne(input interface{}) *UserRepository_InsertOne_Call {
	return &UserRepository_InsertOne_Call{Call: _e.mock.On("InsertOne", input)}
}

func (_c *UserRepository_InsertOne_Call) Run(run func(input *models.User)) *UserRepository_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserRepository_InsertOne_Call) Return(insertedID string, err error) *UserRepository_InsertOne_Call {
	_c.Call.Return(insertedID, err)
	return _c
}

func (_c *UserRepository_InsertOne_Call) RunAndReturn(run func(*models.User) (string, error)) *UserRepository_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
